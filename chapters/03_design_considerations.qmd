# Design Considerations
Recall the WCAG principles from [Chapter one](https://ucdavisdatalab.github.io/workshop_accessibility/01_principles.html). They fall under the main headings: perceivable, operable, understandable, and robust. Of the main headings, "understandable" and "robust" can be mostly passed over here. The guidelines for understandable web content are things we should be designing for in our workshops, with no changes needed specifically for accessibility. Robustness is only slightly more involved: Since we use very little interactivity built into our workshops, we have little exposure to the risk that our site will break when JavaScript libraries are updated or unavailable. The main thing to keep in mind about robustness is that we should use standard tools for accessible design so that we don't rely on hacking into tools like Quarto or Jupyter Book to get our workshops to work properly.

Now that we know how users with disabilities will read the workshop, so we are now ready to integrate that knowledge into a design that is perceivable and operable according to the WCAG guidelines. 

## Perceivable

### Data Visualiations
One element of accessible workshops is to make sure that images are perceivable by people with vision problems. When creating an image (for instance a data visualization) make sure that the text is large and that the color pallette is colorbind-friendly. [Datalab has a whole chapter devoted to accessible data viz](https://ucdavisdatalab.github.io/workshop_data_viz_principles/accessible-data-visualizations.html) in our workshop "Principles of Data Visualization". The chapter caled [Principles of Visual Perception](https://ucdavisdatalab.github.io/workshop_data_viz_principles/principles-of-visual-perception.html) in that workshop also provides some advice about making data visualizations perceivable for everyone. 

### Tables{#section-tables}
A lot of our workshops contain code chunks and tables. Here's [an example from R Basics](https://ucdavisdatalab.github.io/workshop_r_basics/chapters/03_exploring-data.html#two-dimensional-indexing). Generally, we have printed tables as the output of a code block, which wraps the table contents in a set of `<pre><code> ... </code></pre>` blocks. This has the benefit of making the output look exactly like what the user will see at the R console, but it isn't accessible because the raw output has no metadata to describe how the raw text fits into rows and columns with headers and values. Assistive devices like screen readers have ways of describing tabular data *as long as it is properly formatted as an HTML table*. HTML tables don't support alt text. Instead, they should have a `<caption> ... </caption>` element for a basic title that is visible and announced by the screen reader, and ARIA attributes for more detailed desriptions that are hidden from view but are announced by screen readers. The `caption` element is written in markdown as a line that begins with a colon followed by the caption text. The University of California has a page of [tips for making accesible data tables](https://www.ucop.edu/electronic-accessibility/web-developers/advanced-tips/mark-up-data-tables-correctly.html), which include a recommendation to use the `<summary> ... </summary>` element. That element, however, was deprecated in more recent versions of the HTML spec. I think that finding satisfactory solutions for tables will be the most difficult part of redesigning our workshops for accessibility.

## Operable

### Keyboard Interface
Making a workshop operable for users who use a keyboard interface means making sure that the user can navigate to all parts of the workshop and all the controls via the keyboard. Two things to avoid are creating a controls that are unreachable by hitting the Tab key, and creating a "tab loop" where the focus gets stuck in part of the page and can't escape by continuing to hit the Tab key. These risks are generally minimal for us because we create simple pages without much interactivity. But it is nevertheless worth double checking what happens when you try to navigate through all controls on the site via the Tab key.

### Navigation
The table of contents is currently split into two parts. On the left sidebar we show the chapter titles, and on the right sidebar we show the headers within a chapter. This is confusing when using a screen reader because the navigation links aren't all listed together, nor do they align with the overall hierarchy of sections. A unified table of contents should be implemented in the template so that developers of Datalab workshops don't have to do any custom coding in order to get accessibility right. Unfortunately, the